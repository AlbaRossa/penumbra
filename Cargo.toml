[workspace]

# Set virtual workspace's resolver to v1, to support the "rust-docs" script.
resolver = "1"

exclude = ["tools/proto-compiler", "tools/parameter-setup"]

# Also remember to add to deployments/scripts/rust-docs
members = [
  "crates/proto",
  "crates/cnidarium",
  "crates/cnidarium-component",
  "crates/crypto/decaf377-fmd",
  "crates/crypto/decaf377-frost",
  "crates/crypto/decaf377-ka",
  "crates/crypto/eddy",
  "crates/crypto/tct",
  "crates/crypto/proof-params",
  "crates/crypto/proof-setup",
  "crates/core/num",
  "crates/core/keys",
  "crates/core/asset",
  "crates/core/txhash",
  "crates/core/component/chain",
  "crates/core/component/shielded-pool",
  "crates/core/component/governance",
  "crates/core/component/ibc",
  "crates/core/component/community-pool",
  "crates/core/component/dex",
  "crates/core/component/sct",
  "crates/core/component/fee",
  "crates/core/component/compact-block",
  "crates/core/component/distributions",
  "crates/core/component/funding",
  "crates/core/component/stake",
  "crates/core/transaction",
  "crates/core/app",
  "crates/custody",
  "crates/wallet",
  "crates/view",
  "crates/util/tendermint-proxy",
  "crates/util/tower-trace",
  "crates/bin/pd",
  "crates/bin/pclientd",
  "crates/bin/pcli",
  "crates/wasm",
  "crates/test/tct-property-test",
  "crates/misc/measure",
  "crates/misc/tct-visualize",
  "crates/bench",
  "tools/summonerd", "crates/core/component/funding", "crates/old-backend",
]

[workspace.dependencies]
decaf377 = { git = "https://github.com/penumbra-zone/decaf377", branch = "update-deps", features = ["r1cs", "arkworks"] }
decaf377-rdsa = { git = "https://github.com/penumbra-zone/decaf377-rdsa", branch = "update-deps" }
poseidon377 = { git = "https://github.com/penumbra-zone/poseidon377", branch = "update-deps", features = ["r1cs"] }

# Outdated backend
# decaf377 = { version = "0.5", features = ["r1cs"] }
# decaf377-rdsa = { version = "0.7" }
# poseidon377 = { version = "0.6", features = ["r1cs"] }

# Optimize for small binaries in just the wasm crate.
[profile.release.package.penumbra-wasm]
opt-level = "s"

# Config for 'cargo dist'
[workspace.metadata.dist]
# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.5.0"
# The preferred Rust toolchain to use in CI (rustup toolchain syntax)
rust-toolchain-version = "1.73"
# CI backends to support
ci = ["github"]
# Target platforms to build apps for (Rust target-triple syntax)
targets = [
  "x86_64-unknown-linux-gnu",
  "aarch64-apple-darwin",
  "x86_64-apple-darwin",
]
# The installers to generate for each app
installers = []
# Publish jobs to run in CI
pr-run-mode = "skip"
# We override RUSTFLAGS, so we must permit changes from the default template.
allow-dirty = ["ci"]

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"

# config for 'cargo release'
[workspace.metadata.release]
# Instruct cargo-release to increment versions for all packages in the workspace in lockstep.
shared-version = true
# Format spec for the auto-generated git tag, based on new version for release.
tag-name = "v{{version}}"
# The message is required for an annotated tag to be created.
tag-message = "Penumbra version {{version}}"
pre-release-commit-message = "chore: release version {{version}}"
# Don't push to crates.io; we're still using git branches for velocity.
publish = false
# Do commit, tag, and push the version bump, triggering a new release.
tag = true
# Don't push, since we're still evaluating the new release workflow.
push = false
